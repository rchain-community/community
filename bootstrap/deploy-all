#!/bin/bash

ALREADY=`ps -fu |grep " java .*rnode"|grep -v grep |sed 's/[ \t][ \t]*/ /g'|cut -d' ' -f 1`
[ -n "$ALREADY" ] && echo "
$0: rnode is currently running
Use 'kill $ALREADY' to fix.
" && while read -p "$0: Execute 'kill $ALREADY' [n]? " response;do
	if [ "$response" == "y" ] || [ -z "$response" ];then
		kill $ALREADY
		break
	else
		echo "$0: exiting"
		exit 1
	fi
done

[ ! -d ~/.rnode ] && echo "
$0: $HOME/.rnode does not exist. Use 'bootstrap' to fix.
" && exit 1

cd `dirname $0`

./list-snapshot|grep "rgov" && echo "$0: snapshot rgov already exists." && while read -p "Use it instead of re-running deploy [y]? " response;do
   if [ "$response" == 'y' ] || [ -z "$response" ];then
      ./restore-snapshot "rgov"
      exit 0
   else
      echo "$0: Re-running deploy"
      break
   fi
done


private_key=`cat pk.bootstrap`

ME=`basename $0`

DEPLOY="./deploy"
LOGFILE="log/$ME.log"

javascript_file=generated/generated.rhoid.bootstrap.js
json_file=generated/generated.rhoid.bootstrap.json

# Get everything, including system classes
git clone https://github.com/rchain/rchain.git || (cd rchain && git pull)

# Updating our local source should be an option -- look into the wisdom of this
#git pull https://github.com/rchain-community/liquid-democracy.git

rnode run -s \
   --validator-private-key $private_key \
   --dev-mode \
   -XX:MaxDirectMemorySize=100m -XX:MaxRAMPercentage=25 \
   > $LOGFILE 2>&1 &


PID=$!

# The previous command doesn't produce output -- but this makes up for that
tail -F $LOGFILE|sed -e '/Making a transition to Running state./q'

deployFiles() {
   WAITPID=""
   while read t;do
      $DEPLOY $t &
      WAITPID="$WAITPID $!"
   done |tee -a log/deployment.log 2>&1
   wait $WAITPID
}

# deploy rchain code
find rchain -name "*.rho"|grep -v "test"|grep -v "tests" |grep -v "examples" | deployFiles


# deploy rgov
# ../Community.rho \
ls -1 \
../CrowdFund.rho \
../Directory.rho \
../Inbox.rho \
../Issue.rho \
../Kudos.rho \
../Log.rho \
../memberIdGovRev.rho \
../RevIssuer.rho \
../Echo.rho \
./voter-insertion.rho \
| deployFiles

# Finalize the rnode
echo "$0: Proposing...." | tee -a log/deployment.log
rnode --grpc-port 40402 propose 2>&1 | tee -a log/deployment.log
echo "$0: Propose finished."

# generate javascript
gen_javascript() {
echo "// @ts-check"
egrep '^\["#define [^"][^"]*", `[^`]*`]|^\["Log contract created at"' | sort -u|sed '
s/\["Log contract created at"/["#define $Log"/
s/\["#define \$/\/** @type { FieldSpec } *\/\nexport const /
s/", /Reg = {\n\ttype: "uri",\n\tvalue: "/
s/\]/",\n};\n\n/
s/`//g
s/\t/  /g
'
}

# These are no longer necessary and are invalid after a redploy-class
# echo "$0: Generating javascript file [$javascript_file]"
# gen_javascript < $LOGFILE > $javascript_file

# generate json
gen_json() {
echo "{
   \"rhoid\": {"
egrep '^\["#define [^"][^"]*", `[^`]*`]|^\["Log contract created at"' | sort -u|sed '
s/\["Log contract created at"/["#define $Log"/
s/\["#define \$/    "/
s/, /: "/
s/\]/",/
s/`//g
'
echo '    "NecessaryInvalidPlaceholder": ""
  }
}'
}

# These are no longer necessary and are invalid after a redploy-class
# echo "$0: Generating json file [$json_file]"
# gen_json < $LOGFILE > $json_file

# generate and create the master contract directory
echo "$0: Generating generated/generated.create-master-contract-directory.rho"
./master-contract-directory > generated/generated.create-master-contract-directory.rho

echo "generated/generated.create-master-contract-directory.rho"| deployFiles | tee -a log/create-master-directory.log
echo "$0: Proposing generated/generated.create-master-contract-directory.rho" |tee -a log/create-master-directory.log
rnode --grpc-port 40402 propose 2>&1 | tee -a log/deployment.log

echo "Creating ../src/MasterURI.localhost.json"
echo "{\"MasterURI\": { \"rhoid\":" > ../src/MasterURI.localhost.json
grep "ReadcapURI" $LOGFILE |tail -1 | cut -d' ' -f3|sed '
s/\}/"/
s/^/"/
'>> ../src/MasterURI.localhost.json
echo "}}" >> ../src/MasterURI.localhost.json

echo "$0: listing master directory"
./deploy listMasterURI.rho
rnode --grpc-port 40402 propose 2>&1 | tee -a log/deployment.log
echo "Waiting for rnode to finish (10s)" && sleep 10 && echo "$0: Stopping deployment rnode"
kill $PID && sleep 2

echo "$0: Creating rgov snapshot"
./create-snapshot rgov
grep '{"ReadcapURI" : `' $LOGFILE|tail -1|sed 's-`-"-g' > ../ReadcapURI.json
stty echo
